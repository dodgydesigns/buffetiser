services:
  db:
    image: postgres:17
    container_name: buffetiser_db
    restart: always
    environment:
      POSTGRES_USER: buffetiser
      POSTGRES_PASSWORD: password
      POSTGRES_DB: BUFFETISER_DB
    ports:
      - "5433:5432"
    networks:
      - network

  redis:
    image: redis:7-alpine
    container_name: buffetiser_redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - network

  backend:
    build:
      context: ./backend
    container_name: buffetiser_backend
    command: >
      sh -c "
        ./wait-for-it.sh db:5433 -- python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py loaddata --exclude=auth.permission --exclude=contenttypes fixtures/buffetiser_25-06-06_data.json &&
        # python manage.py createsuperuser --username buffetiser --email dodgydesigns@gmail.com --noinput &&
        python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_URL=postgres://buffetiser:password@db:5433/BUFFETISER_DB
      - DEBUG=${DJANGO_DEBUG}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - REDIS_URL=redis://redis:6379
    networks:
      - network

  frontend:
    build:
      context: ./frontend
    container_name: buffetiser_frontend
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
    networks:
      - network
    ports:
      - "8080:8080"
    command: ["sh", "-c", "npm install && npm run build"]  # Build the frontend
    # command: ["sh", "-c", "npm install && npm run build && serve -s build -l 8080"]  # Build the frontend

  # backend:
  #   image: mullsy123/buffetiser-backend:latest
  #   container_name: buffetiser_backend
  #   restart: always

  # frontend:
  #   image: mullsy123/buffetiser-frontend:latest
  #   container_name: buffetiser_frontend
  #   restart: always

  webserver:
    image: nginx:alpine
    container_name: buffetiser_webserver
    depends_on:
      - frontend
    volumes:
      - ./frontend/build:/usr/share/nginx/html:ro
    ports:
      - "81:80"
    networks:
      - network

  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   restart: always
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command: --cleanup --interval 300

networks:
  network:
    driver: bridge
